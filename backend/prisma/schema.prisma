generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "mysql" dependendo do seu banco
  url      = env("DATABASE_URL")
}

model Address {
  id           Int    @id @default(autoincrement())
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  postalCode   String

  students Student[]
  teachers Teacher[]
  admins   Admin[]
}

model Student {
  id          Int             @id @default(autoincrement())
  name        String
  cpf         String          @unique
  phone       String?
  picture     String?
  password    String
  addressId   Int
  email       String?
  classLinks  Class_Student[]
  attendances Attendence[]
  fees        Fee[]
  address     Address         @relation(fields: [addressId], references: [id])
}

model Teacher {
  id        Int     @id @default(autoincrement())
  name      String
  cpf       String  @unique
  phone     String?
  picture   String?
  password  String
  addressId Int
  email     String?
  Class     Class[]
  address   Address @relation(fields: [addressId], references: [id])
}

model BlackListToken {
  token String @unique
}

model Admin {
  id        Int       @id @default(autoincrement())
  name      String
  cpf       String    @unique
  phone     String?
  picture   String?
  password  String
  addressId Int
  email     String?
  address   Address   @relation(fields: [addressId], references: [id])
  payments  Payment[]
}

model Course {
  id      Int     @id @default(autoincrement())
  name    String
  code    String  @unique
  picture String?

  classes Class[]
}

model Class {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  turno     String
  horario   Json?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  Int
  teacherId Int?

  course Course @relation(fields: [courseId], references: [id])

  teacher     Teacher?         @relation(fields: [teacherId], references: [id])
  students    Class_Student[]
  attendances Attendence[]
}

model Class_Student {
  id        Int @id @default(autoincrement())
  studentId Int
  classId   Int

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model Attendence {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   Int
  date      DateTime @default(now())

  class   Class   @relation(fields: [classId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId, date])
}

model Fee {
  id          Int      @id @default(autoincrement())
  studentId   Int
  price       Float
  dueDate     DateTime
  description String

  createdAt DateTime @default(now())

  student  Student   @relation(fields: [studentId], references: [id])
  payments Payment[]
}

model Payment {
  id          Int         @id @default(autoincrement())
  feeId       Int
  paymentType PaymentType
  description String
  adminId     Int

  createdAt DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])
  fee   Fee   @relation(fields: [feeId], references: [id])
}

enum PaymentType {
  DINHEIRO
  BOLETO
  CREDITO
  DEBITO
  DEPOSITO
  PIX
}
