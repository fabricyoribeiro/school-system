generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "mysql" dependendo do seu banco
  url      = env("DATABASE_URL")
}

model Address {
  id           Int    @id @default(autoincrement())
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  postalCode   String

  students Student[]
  teachers Teacher[]
  admins   Admin[]
}

model Student {
  id        Int     @id @default(autoincrement())
  name      String
  cpf       String  @unique
  phone     String
  picture   String
  password  String
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  classLinks  Class_Student[]
  attendances Attendence[]
  fees        Fee[]
}

model Teacher {
  id        Int     @id @default(autoincrement())
  name      String
  cpf       String  @unique
  phone     String
  picture   String
  password  String
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])
  Class     Class[]
}

model Admin {
  id        Int     @id @default(autoincrement())
  name      String
  cpf       String  @unique
  phone     String
  picture   String
  password  String
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  payments Payment[]
}

model Course {
  id      Int    @id @default(autoincrement())
  name    String
  picture String

  classes Class[]
}

model Class {
  id        Int      @id @default(autoincrement())
  turno     String
  horario   DateTime
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  Int
  teacherId Int

  course Course @relation(fields: [courseId], references: [id])

  teacher     Teacher         @relation(fields: [teacherId], references: [id])
  students    Class_Student[]
  attendances Attendence[]
}

model Class_Student {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class   @relation(fields: [classId], references: [id])
  classId   Int
}

model Attendence {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  date      DateTime
}

model Fee {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  value       Float
  dueDate     DateTime
  createdAt   DateTime @default(now())
  description String

  payments Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  fee         Fee      @relation(fields: [feeId], references: [id])
  feeId       Int
  paymentType String
  admin       Admin    @relation(fields: [adminId], references: [id])
  adminId     Int
  createdAt   DateTime @default(now())
  description String
}
